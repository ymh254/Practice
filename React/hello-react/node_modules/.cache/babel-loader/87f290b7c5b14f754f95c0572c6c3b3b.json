{"ast":null,"code":"var _jsxFileName = \"/Users/minos/Documents/git/Practice/React/hello-react/src/pages/calendar/NewCalendar.js\";\nimport React, { useState, useEffect } from 'react';\nimport NewCalendarCell from './NewCalendarCell';\nimport { useCalendarState } from './calendarState';\n\nconst NewCalendar = () => {\n  const [calendarState, setCalendarState] = useCalendarState();\n  const {\n    date\n  } = calendarState;\n  const [days] = useState(['일', '월', '화', '수', '목', '금', '토']);\n  const [dates, setDates] = useState([]); // 달력의 행\n\n  const [curSchedule, setCurSchedule] = useState([]); // 현재 달력 날짜 안에 포함된 스케쥴\n\n  useEffect(() => {\n    const {\n      firstDate,\n      lastDate\n    } = getFirstAndLastDate();\n    setDates(makeCalendar(firstDate, lastDate));\n  }, [date]);\n\n  const getFirstAndLastDate = () => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    let firstDate = new Date(year, month, 1);\n    firstDate = new Date(year, month, -firstDate.getDay() + 1);\n    let lastDate = new Date(year, month + 1, 0);\n    lastDate = new Date(year, month + 1, 6 - lastDate.getDay());\n    return {\n      firstDate: firstDate,\n      lastDate: lastDate\n    };\n  };\n\n  const makeCalendar = (firstDate, lastDate) => {\n    let tempDate = new Date(firstDate);\n    let newDates = [];\n    let index = 0;\n\n    while (tempDate.getMonth() !== lastDate.getMonth() || tempDate.getDate() !== lastDate.getDate()) {\n      if (index % 7 === 0) newDates[parseInt(index / 7)] = [];\n      newDates[parseInt(index / 7)].push(tempDate);\n      tempDate = new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() + 1);\n      index++;\n    }\n\n    newDates[parseInt(index / 7)].push(tempDate); // 달력의 시작이 1일이고, 전 달이 30일로 끝나는 날 때문에 따로 배치\n\n    setCurSchedule(getSchedule(firstDate, lastDate, schedule));\n    return newDates.slice();\n  };\n\n  const getCurDateSchedule = curDate => {\n    const curDateSchedule = [];\n    curSchedule.forEach(date => {\n      if (date.curDate.getTime() - curDate.getTime() === 0) {\n        curDateSchedule.push(date);\n      }\n    });\n    return curDateSchedule;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"monthly-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, days.map((a, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    className: \"day-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, a))), dates.map((a, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    className: \"monthly-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, a.map((b, j) => /*#__PURE__*/React.createElement(NewCalendarCell, {\n    key: j,\n    date: b,\n    schedule: getCurDateSchedule(b),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 38\n    }\n  })))));\n};\n\nexport default NewCalendar;","map":{"version":3,"sources":["/Users/minos/Documents/git/Practice/React/hello-react/src/pages/calendar/NewCalendar.js"],"names":["React","useState","useEffect","NewCalendarCell","useCalendarState","NewCalendar","calendarState","setCalendarState","date","days","dates","setDates","curSchedule","setCurSchedule","firstDate","lastDate","getFirstAndLastDate","makeCalendar","year","getFullYear","month","getMonth","Date","getDay","tempDate","newDates","index","getDate","parseInt","push","getSchedule","schedule","slice","getCurDateSchedule","curDate","curDateSchedule","forEach","getTime","map","a","i","b","j"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport NewCalendarCell from './NewCalendarCell';\n\nimport { useCalendarState } from './calendarState';\n\nconst NewCalendar = () => {\n    const [calendarState, setCalendarState] = useCalendarState();\n    const { date } = calendarState;\n\n    const [days] = useState(['일', '월', '화', '수', '목', '금', '토']);\n    const [dates, setDates] = useState([]); // 달력의 행\n    const [curSchedule, setCurSchedule] = useState([]); // 현재 달력 날짜 안에 포함된 스케쥴\n\n    useEffect(\n        () => {\n            const { firstDate, lastDate } = getFirstAndLastDate();\n            setDates(makeCalendar(firstDate, lastDate));\n        },\n        [date]\n    );\n\n    const getFirstAndLastDate = () => {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        let firstDate = new Date(year, month, 1);\n        firstDate = new Date(year, month, -firstDate.getDay() + 1);\n        let lastDate = new Date(year, month + 1, 0);\n        lastDate = new Date(year, month + 1, 6 - lastDate.getDay());\n        return { firstDate: firstDate, lastDate: lastDate };\n    };\n\n    const makeCalendar = (firstDate, lastDate) => {\n        let tempDate = new Date(firstDate);\n        let newDates = [];\n        let index = 0;\n        while (tempDate.getMonth() !== lastDate.getMonth() || tempDate.getDate() !== lastDate.getDate()) {\n            if (index % 7 === 0) newDates[parseInt(index / 7)] = [];\n            newDates[parseInt(index / 7)].push(tempDate);\n            tempDate = new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() + 1);\n            index++;\n        }\n        newDates[parseInt(index / 7)].push(tempDate); // 달력의 시작이 1일이고, 전 달이 30일로 끝나는 날 때문에 따로 배치\n        setCurSchedule(getSchedule(firstDate, lastDate, schedule));\n        return newDates.slice();\n    };\n\n    const getCurDateSchedule = (curDate) => {\n        const curDateSchedule = [];\n        curSchedule.forEach((date) => {\n            if (date.curDate.getTime() - curDate.getTime() === 0) {\n                curDateSchedule.push(date);\n            }\n        });\n\n        return curDateSchedule;\n    };\n\n\n    return (\n        <div id=\"monthly-view\">\n            <div className=\"day-row\">\n                {days.map((a, i) => (\n                    <div key={i} className=\"day-cell\">\n                        {a}\n                    </div>\n                ))}\n            </div>\n\n            {dates.map((a, i) => (\n                <div key={i} className=\"monthly-row\">\n                    {a.map((b, j) => <NewCalendarCell key={j} date={b} schedule={getCurDateSchedule(b)} />)}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default NewCalendar;"]},"metadata":{},"sourceType":"module"}