{"ast":null,"code":"var _jsxFileName = \"/Users/minos/Documents/git/Practice/React/hello-react/src/pages/NewCalendarCell.js\";\nimport React, { useState, useEffect } from 'react';\nimport 'sass/app.css';\n\nconst NewCalendarCell = props => {\n  const {\n    date,\n    schedule\n  } = props;\n  const [addFormState, setAddFormState] = useAddFormState();\n  const {\n    active\n  } = addFormState;\n  const [errorState, setErrorState] = useErrorState();\n  const [userData, setUserData] = useUserData();\n  const [dragAndDrop, setDragAndDrop] = useDragAndDrop();\n  const [curDateStr, setCurDateStr] = useState('');\n  useEffect(() => {\n    let newCurDateStr = date.getDate();\n\n    if (schedule.length !== 0) {\n      newCurDateStr += ' (' + schedule.length + ')';\n    }\n\n    setCurDateStr(newCurDateStr);\n  }, [schedule]);\n\n  const onClickDate = () => {\n    if (!active) {\n      const startHour = new Date().getHours();\n      setAddFormState({ ...addFormState,\n        active: true,\n        mode: 'add',\n        title: '',\n        curDate: date,\n        startHour: startHour,\n        endHour: startHour + 1\n      });\n    }\n  };\n\n  const onClickSchedule = (e, schedule) => {\n    e.stopPropagation();\n    const {\n      title,\n      curDate,\n      startHour,\n      endHour\n    } = schedule;\n\n    if (!active) {\n      setAddFormState({ ...addFormState,\n        active: true,\n        mode: 'edit',\n        title: title,\n        curDate: curDate,\n        startHour: startHour,\n        endHour: endHour\n      });\n    }\n  };\n\n  const onDropSchedule = e => {\n    const newSchedule = editDate(dragAndDrop.to, dragAndDrop.from, userData.schedule);\n\n    if (newSchedule !== false) {\n      setUserData({ ...userData,\n        schedule: newSchedule\n      });\n      setAddFormState({ ...addFormState,\n        active: false\n      });\n      setErrorState({ ...errorState,\n        active: true,\n        mode: 'edit',\n        message: [['일정이 수정 되었습니다.']]\n      });\n    } else {\n      setErrorState({ ...errorState,\n        active: true,\n        mode: 'fail',\n        message: [['일정을 수정할 수 없습니다.'], ['해당 시간에 이미 다른 일정이 존재합니다.']]\n      });\n    }\n  };\n\n  const onDragCell = (e, schedule) => {\n    setDragAndDrop({ ...dragAndDrop,\n      from: schedule\n    });\n  };\n\n  const onDragEnterCell = e => {\n    const {\n      title,\n      startHour,\n      endHour\n    } = dragAndDrop.from;\n    const newScheduleForm = {\n      title: title,\n      curDate: date,\n      startHour: startHour,\n      endHour: endHour\n    };\n    setDragAndDrop({ ...dragAndDrop,\n      to: newScheduleForm\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthly-cell\",\n    onClick: onClickDate,\n    onDragEnter: onDragEnterCell,\n    onDragEnd: onDropSchedule,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, curDateStr), schedule.map((a, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    className: \"monthly-schedule\",\n    onClick: e => onClickSchedule(e, a),\n    draggable: true,\n    onDragStart: e => onDragCell(e, a),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, a.startHour + '시 ~ ' + a.endHour + '시'), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, a.title))));\n};\n\nexport default NewCalendarCell;","map":{"version":3,"sources":["/Users/minos/Documents/git/Practice/React/hello-react/src/pages/NewCalendarCell.js"],"names":["React","useState","useEffect","NewCalendarCell","props","date","schedule","addFormState","setAddFormState","useAddFormState","active","errorState","setErrorState","useErrorState","userData","setUserData","useUserData","dragAndDrop","setDragAndDrop","useDragAndDrop","curDateStr","setCurDateStr","newCurDateStr","getDate","length","onClickDate","startHour","Date","getHours","mode","title","curDate","endHour","onClickSchedule","e","stopPropagation","onDropSchedule","newSchedule","editDate","to","from","message","onDragCell","onDragEnterCell","newScheduleForm","map","a","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'sass/app.css';\n\nconst NewCalendarCell = (props) => {\n    const { date, schedule } = props;\n    const [addFormState, setAddFormState] = useAddFormState();\n    const { active } = addFormState;\n    const [errorState, setErrorState] = useErrorState();\n    const [userData, setUserData] = useUserData();\n    const [dragAndDrop, setDragAndDrop] = useDragAndDrop();\n    const [curDateStr, setCurDateStr] = useState('');\n\n    useEffect(\n        () => {\n            let newCurDateStr = date.getDate();\n            if (schedule.length !== 0) {\n                newCurDateStr += ' (' + schedule.length + ')';\n            }\n            setCurDateStr(newCurDateStr);\n        },\n        [schedule]\n    );\n\n    const onClickDate = () => {\n        if (!active) {\n            const startHour = new Date().getHours();\n            setAddFormState({\n                ...addFormState,\n                active: true,\n                mode: 'add',\n                title: '',\n                curDate: date,\n                startHour: startHour,\n                endHour: startHour + 1\n            });\n        }\n    };\n\n    const onClickSchedule = (e, schedule) => {\n        e.stopPropagation();\n        const { title, curDate, startHour, endHour } = schedule;\n\n        if (!active) {\n            setAddFormState({\n                ...addFormState,\n                active: true,\n                mode: 'edit',\n                title: title,\n                curDate: curDate,\n                startHour: startHour,\n                endHour: endHour\n            });\n        }\n    };\n\n    const onDropSchedule = (e) => {\n        const newSchedule = editDate(dragAndDrop.to, dragAndDrop.from, userData.schedule);\n\n        if (newSchedule !== false) {\n            setUserData({ ...userData, schedule: newSchedule });\n            setAddFormState({ ...addFormState, active: false });\n            setErrorState({\n                ...errorState,\n                active: true,\n                mode: 'edit',\n                message: [['일정이 수정 되었습니다.']]\n            });\n        } else {\n            setErrorState({\n                ...errorState,\n                active: true,\n                mode: 'fail',\n                message: [['일정을 수정할 수 없습니다.'], ['해당 시간에 이미 다른 일정이 존재합니다.']]\n            });\n        }\n    };\n\n    const onDragCell = (e, schedule) => {\n        setDragAndDrop({ ...dragAndDrop, from: schedule });\n    };\n\n    const onDragEnterCell = (e) => {\n        const { title, startHour, endHour } = dragAndDrop.from;\n        const newScheduleForm = { title: title, curDate: date, startHour: startHour, endHour: endHour };\n        setDragAndDrop({ ...dragAndDrop, to: newScheduleForm });\n    };\n\n    return (\n        <div className=\"monthly-cell\" onClick={onClickDate} onDragEnter={onDragEnterCell} onDragEnd={onDropSchedule}>\n            <p>{curDateStr}</p>\n\n            {schedule.map((a, i) => (\n                <div\n                    key={i}\n                    className=\"monthly-schedule\"\n                    onClick={(e) => onClickSchedule(e, a)}\n                    draggable\n                    onDragStart={(e) => onDragCell(e, a)}\n                >\n                    <p>{a.startHour + '시 ~ ' + a.endHour + '시'}</p>\n                    <p>{a.title}</p>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default NewCalendarCell;\n"]},"metadata":{},"sourceType":"module"}