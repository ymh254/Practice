{"ast":null,"code":"var _jsxFileName = \"/Users/minos/Documents/git/Practice/React/hello-react/src/pages/NewCalendarCell.js\";\nimport React, { useState, useEffect } from 'react';\nimport 'sass/app.css';\n\nconst NewCalendarCell = props => {\n  const {\n    date,\n    schedule\n  } = props; // const [addFormState, setAddFormState] = useAddFormState();\n  // const { active } = addFormState;\n  // const [errorState, setErrorState] = useErrorState();\n  // const [userData, setUserData] = useUserData();\n  // const [dragAndDrop, setDragAndDrop] = useDragAndDrop();\n\n  const [curDateStr, setCurDateStr] = useState('');\n  useEffect(() => {\n    let newCurDateStr = date.getDate();\n\n    if (schedule.length !== 0) {\n      newCurDateStr += ' (' + schedule.length + ')';\n    }\n\n    setCurDateStr(newCurDateStr);\n  }, [schedule]); // const onClickDate = () => {\n  //     if (!active) {\n  //         const startHour = new Date().getHours();\n  //         setAddFormState({\n  //             ...addFormState,\n  //             active: true,\n  //             mode: 'add',\n  //             title: '',\n  //             curDate: date,\n  //             startHour: startHour,\n  //             endHour: startHour + 1\n  //         });\n  //     }\n  // };\n  // const onClickSchedule = (e, schedule) => {\n  //     e.stopPropagation();\n  //     const { title, curDate, startHour, endHour } = schedule;\n  //     if (!active) {\n  //         setAddFormState({\n  //             ...addFormState,\n  //             active: true,\n  //             mode: 'edit',\n  //             title: title,\n  //             curDate: curDate,\n  //             startHour: startHour,\n  //             endHour: endHour\n  //         });\n  //     }\n  // };\n  // const onDropSchedule = (e) => {\n  //     const newSchedule = editDate(dragAndDrop.to, dragAndDrop.from, userData.schedule);\n  //     if (newSchedule !== false) {\n  //         setUserData({ ...userData, schedule: newSchedule });\n  //         setAddFormState({ ...addFormState, active: false });\n  //         setErrorState({\n  //             ...errorState,\n  //             active: true,\n  //             mode: 'edit',\n  //             message: [['일정이 수정 되었습니다.']]\n  //         });\n  //     } else {\n  //         setErrorState({\n  //             ...errorState,\n  //             active: true,\n  //             mode: 'fail',\n  //             message: [['일정을 수정할 수 없습니다.'], ['해당 시간에 이미 다른 일정이 존재합니다.']]\n  //         });\n  //     }\n  // };\n  // const onDragCell = (e, schedule) => {\n  //     setDragAndDrop({ ...dragAndDrop, from: schedule });\n  // };\n  // const onDragEnterCell = (e) => {\n  //     const { title, startHour, endHour } = dragAndDrop.from;\n  //     const newScheduleForm = { title: title, curDate: date, startHour: startHour, endHour: endHour };\n  //     setDragAndDrop({ ...dragAndDrop, to: newScheduleForm });\n  // };\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"monthly-cell\" onClick={onClickDate} onDragEnter={onDragEnterCell} onDragEnd={onDropSchedule}>\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, curDateStr))\n  );\n};\n\nexport default NewCalendarCell;","map":{"version":3,"sources":["/Users/minos/Documents/git/Practice/React/hello-react/src/pages/NewCalendarCell.js"],"names":["React","useState","useEffect","NewCalendarCell","props","date","schedule","curDateStr","setCurDateStr","newCurDateStr","getDate","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,cAAP;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBF,KAA3B,CAD+B,CAE/B;AACA;AACA;AACA;AACA;;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CACL,MAAM;AACF,QAAIO,aAAa,GAAGJ,IAAI,CAACK,OAAL,EAApB;;AACA,QAAIJ,QAAQ,CAACK,MAAT,KAAoB,CAAxB,EAA2B;AACvBF,MAAAA,aAAa,IAAI,OAAOH,QAAQ,CAACK,MAAhB,GAAyB,GAA1C;AACH;;AACDH,IAAAA,aAAa,CAACC,aAAD,CAAb;AACH,GAPI,EAQL,CAACH,QAAD,CARK,CAAT,CAT+B,CAoB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIC,UAAJ,CADJ;AAFJ;AAmBH,CAvGD;;AAyGA,eAAeJ,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'sass/app.css';\n\nconst NewCalendarCell = (props) => {\n    const { date, schedule } = props;\n    // const [addFormState, setAddFormState] = useAddFormState();\n    // const { active } = addFormState;\n    // const [errorState, setErrorState] = useErrorState();\n    // const [userData, setUserData] = useUserData();\n    // const [dragAndDrop, setDragAndDrop] = useDragAndDrop();\n    const [curDateStr, setCurDateStr] = useState('');\n\n    useEffect(\n        () => {\n            let newCurDateStr = date.getDate();\n            if (schedule.length !== 0) {\n                newCurDateStr += ' (' + schedule.length + ')';\n            }\n            setCurDateStr(newCurDateStr);\n        },\n        [schedule]\n    );\n\n    // const onClickDate = () => {\n    //     if (!active) {\n    //         const startHour = new Date().getHours();\n    //         setAddFormState({\n    //             ...addFormState,\n    //             active: true,\n    //             mode: 'add',\n    //             title: '',\n    //             curDate: date,\n    //             startHour: startHour,\n    //             endHour: startHour + 1\n    //         });\n    //     }\n    // };\n\n    // const onClickSchedule = (e, schedule) => {\n    //     e.stopPropagation();\n    //     const { title, curDate, startHour, endHour } = schedule;\n\n    //     if (!active) {\n    //         setAddFormState({\n    //             ...addFormState,\n    //             active: true,\n    //             mode: 'edit',\n    //             title: title,\n    //             curDate: curDate,\n    //             startHour: startHour,\n    //             endHour: endHour\n    //         });\n    //     }\n    // };\n\n    // const onDropSchedule = (e) => {\n    //     const newSchedule = editDate(dragAndDrop.to, dragAndDrop.from, userData.schedule);\n\n    //     if (newSchedule !== false) {\n    //         setUserData({ ...userData, schedule: newSchedule });\n    //         setAddFormState({ ...addFormState, active: false });\n    //         setErrorState({\n    //             ...errorState,\n    //             active: true,\n    //             mode: 'edit',\n    //             message: [['일정이 수정 되었습니다.']]\n    //         });\n    //     } else {\n    //         setErrorState({\n    //             ...errorState,\n    //             active: true,\n    //             mode: 'fail',\n    //             message: [['일정을 수정할 수 없습니다.'], ['해당 시간에 이미 다른 일정이 존재합니다.']]\n    //         });\n    //     }\n    // };\n\n    // const onDragCell = (e, schedule) => {\n    //     setDragAndDrop({ ...dragAndDrop, from: schedule });\n    // };\n\n    // const onDragEnterCell = (e) => {\n    //     const { title, startHour, endHour } = dragAndDrop.from;\n    //     const newScheduleForm = { title: title, curDate: date, startHour: startHour, endHour: endHour };\n    //     setDragAndDrop({ ...dragAndDrop, to: newScheduleForm });\n    // };\n\n    return (\n        // <div className=\"monthly-cell\" onClick={onClickDate} onDragEnter={onDragEnterCell} onDragEnd={onDropSchedule}>\n        <div>\n            <p>{curDateStr}</p>\n\n            {/* {schedule.map((a, i) => (\n                <div\n                    key={i}\n                    className=\"monthly-schedule\"\n                    onClick={(e) => onClickSchedule(e, a)}\n                    draggable\n                    onDragStart={(e) => onDragCell(e, a)}\n                >\n                    <p>{a.startHour + '시 ~ ' + a.endHour + '시'}</p>\n                    <p>{a.title}</p>\n                </div>\n            ))} */}\n        </div>\n    );\n};\n\nexport default NewCalendarCell;\n"]},"metadata":{},"sourceType":"module"}