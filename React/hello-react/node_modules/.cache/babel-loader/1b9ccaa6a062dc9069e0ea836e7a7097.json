{"ast":null,"code":"var _jsxFileName = \"/Users/minos/Documents/react/Practice/hello-react/src/Countdown.js\";\nimport React, { Component } from 'react';\n\nclass Countdown extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      timerOn: false,\n      timerStart: 0,\n      timerTime: 0\n    };\n\n    this.startTimer = () => {\n      this.setState({\n        timerOn: true,\n        timerTime: this.state.timerTime,\n        timerStart: this.state.timerTime\n      });\n      this.timer = setInterval(() => {\n        const newTime = this.state.timerTime - 10;\n\n        if (newTime >= 0) {\n          this.setState({\n            timerTime: newTime\n          });\n        } else {\n          clearInterval(this.timer);\n          this.setState({\n            timerOn: false\n          });\n          alert(\"Countdown ended\");\n        }\n      }, 10);\n    };\n\n    this.stopTimer = () => {\n      clearInterval(this.timer);\n      this.setState({\n        timerOn: false\n      });\n    };\n\n    this.resetTimer = () => {\n      if (this.state.timerOn === false) {\n        this.setState({\n          timerTime: this.state.timerStart\n        });\n      }\n    };\n\n    this.adjustTimer = input => {\n      const {\n        timerTime,\n        timerOn\n      } = this.state;\n      const max = 216000000;\n\n      if (!timerOn) {\n        if (input === \"incHours\" && timerTime + 3600000 < max) {\n          this.setState({\n            timerTime: timerTime + 3600000\n          });\n        } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n          this.setState({\n            timerTime: timerTime - 3600000\n          });\n        } else if (input === \"incMinutes\" && timerTime + 60000 < max) {\n          this.setState({\n            timerTime: timerTime + 60000\n          });\n        } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n          this.setState({\n            timerTime: timerTime - 60000\n          });\n        } else if (input === \"incSeconds\" && timerTime + 1000 < max) {\n          this.setState({\n            timerTime: timerTime + 1000\n          });\n        } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n          this.setState({\n            timerTime: timerTime - 1000\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      timerTime,\n      timerStart,\n      timerOn\n    } = this.state;\n    let seconds = (\"0\" + Math.floor(timerTime / 1000 % 60) % 60).slice(-2);\n    let minutes = (\"0\" + Math.floor(timerTime / 60000 % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000 % 60)).slice(-2);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Countdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Countdown-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, \"Countdown\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Countdown-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"Hours : Minutes : Seconds\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Countdown-display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incHours\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, \"\\u21E7\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decHours\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, \"\\u21E9\"), /*#__PURE__*/React.createElement(\"t\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 90\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incMinutes\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, \"\\u21E7\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decMinutes\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, \"\\u21E9\"), /*#__PURE__*/React.createElement(\"t\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 92\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incSeconds\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, \"\\u21E7\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decSeconds\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, \"\\u21E9\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Countdown-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, hours, \" : \", minutes, \" : \", seconds), timerOn === false && (timerStart === 0 || timerTime === timerStart) && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, \"Start\"), timerOn === true && timerTime >= 1000 && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.stopTimer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }, \"Stop\"), timerOn === false && timerStart !== 0 && timerStart !== timerTime && timerTime !== 0 && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, \"Resume\"), (timerOn === false || timerTime < 1000) && timerStart !== timerTime && timerStart > 0 && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.resetTimer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }, \"Reset\")));\n  }\n\n}\n\nexport default Countdown;","map":{"version":3,"sources":["/Users/minos/Documents/react/Practice/hello-react/src/Countdown.js"],"names":["React","Component","Countdown","state","timerOn","timerStart","timerTime","startTimer","setState","timer","setInterval","newTime","clearInterval","alert","stopTimer","resetTimer","adjustTimer","input","max","render","seconds","Math","floor","slice","minutes","hours"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Countdown extends Component {\n\n    state = {\n        timerOn: false,\n        timerStart: 0,\n        timerTime: 0\n    };\n\n    startTimer = () => {\n        this.setState({\n          timerOn: true,\n          timerTime: this.state.timerTime,\n          timerStart: this.state.timerTime\n        });\n        this.timer = setInterval(() => {\n          const newTime = this.state.timerTime - 10;\n          if (newTime >= 0) {\n            this.setState({\n              timerTime: newTime\n            });\n          } else {\n            clearInterval(this.timer);\n            this.setState({ timerOn: false });\n            alert(\"Countdown ended\");\n          }\n        }, 10);\n      };\n\n      stopTimer = () => {\n        clearInterval(this.timer);\n        this.setState({ timerOn: false });\n      };\n      resetTimer = () => {\n        if (this.state.timerOn === false) {\n          this.setState({\n            timerTime: this.state.timerStart\n          });\n        }\n      }; \n      adjustTimer = input => {\n        const { timerTime, timerOn } = this.state;\n        const max = 216000000;\n        if (!timerOn) {\n          if (input === \"incHours\" && timerTime + 3600000 < max) {\n            this.setState({ timerTime: timerTime + 3600000 });\n          } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n            this.setState({ timerTime: timerTime - 3600000 });\n          } else if (input === \"incMinutes\" && timerTime + 60000 < max) {\n            this.setState({ timerTime: timerTime + 60000 });\n          } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n            this.setState({ timerTime: timerTime - 60000 });\n          } else if (input === \"incSeconds\" && timerTime + 1000 < max) {\n            this.setState({ timerTime: timerTime + 1000 });\n          } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n            this.setState({ timerTime: timerTime - 1000 });\n          }\n        }\n      };\n\n    render() {\n\n        const { timerTime, timerStart, timerOn } = this.state;\n        let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n        let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n        let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n\n        return (\n            <div className=\"Countdown\">\n                <div className=\"Countdown-header\">Countdown</div>\n                <div className=\"Countdown-label\">Hours : Minutes : Seconds</div>\n                <div className=\"Countdown-display\">\n                    <button onClick={() => this.adjustTimer(\"incHours\")}>&#8679;</button>\n                    <button onClick={() => this.adjustTimer(\"decHours\")}>&#8681;</button><t/>\n                    <button onClick={() => this.adjustTimer(\"incMinutes\")}>&#8679;</button>\n                    <button onClick={() => this.adjustTimer(\"decMinutes\")}>&#8681;</button><t/>\n                    <button onClick={() => this.adjustTimer(\"incSeconds\")}>&#8679;</button>\n                    <button onClick={() => this.adjustTimer(\"decSeconds\")}>&#8681;</button>\n                    <div className=\"Countdown-time\">\n                        {hours} : {minutes} : {seconds}\n                    </div>\n                    {timerOn === false &&\n                        (timerStart === 0 || timerTime === timerStart) && (\n                            <button onClick={this.startTimer}>Start</button>\n                        )}\n                    {timerOn === true && timerTime >= 1000 && (\n                        <button onClick={this.stopTimer}>Stop</button>\n                        )}\n                    {timerOn === false &&\n                        (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                            <button onClick={this.startTimer}>Resume</button>\n                    )}\n                    {(timerOn === false || timerTime < 1000) &&\n                        (timerStart !== timerTime && timerStart > 0) && (\n                            <button onClick={this.resetTimer}>Reset</button>\n                    )}\n                </div>\n            </div>\n            \n        );\n    }\n}\n\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}